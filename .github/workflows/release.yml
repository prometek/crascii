name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install cross
        run: sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Configure Cargo for aarch64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p .cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> .cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml

      - name: Build
        env:
          # Only set the linker environment variable for aarch64
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}

      - name: Archive Linux Build Artifacts
        if: success()
        run: |
          mkdir -p artifacts/linux
          cp target/x86_64-unknown-linux-gnu/release/your_binary_name artifacts/linux/
          cp target/aarch64-unknown-linux-gnu/release/your_binary_name artifacts/linux/
          tar -czf build-linux.tar.gz -C artifacts linux

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-linux
          path: build-linux.tar.gz

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install Dependencies for arm64 (if needed)
        if: matrix.target == 'arm64-apple-darwin'
        run: |
          # Add any arm64-specific dependencies here
          # For example, installing Homebrew packages for arm64
          brew update

      - name: Build
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}

      - name: Archive macOS Build Artifacts
        if: success()
        run: |
          mkdir -p artifacts/macos
          cp target/x86_64-apple-darwin/release/your_binary_name artifacts/macos/
          cp target/aarch64-apple-darwin/release/your_binary_name artifacts/macos/
          tar -czf build-macos.tar.gz -C artifacts macos

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-macos
          path: build-macos.tar.gz


    test:
      runs-on: ubuntu-latest
      needs: [build-linux, build-macos]
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Install Rust
          uses: actions-rs/toolchain@v1
          with:
            toolchain: stable

        - name: Run Tests
          run: cargo test --release

  publish:
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Set up Cargo with API Token
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}
        run: |
          mkdir -p ~/.cargo
          echo "[registry]" >> ~/.cargo/credentials
          echo "token = \"${CARGO_REGISTRY_TOKEN}\"" >> ~/.cargo/credentials

      - name: Publish to crates.io
        run: cargo publish 

  release:
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download Linux Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-linux
          path: ./binaries/linux

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-macos
          path: ./binaries/macos

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Linux Binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./binaries/linux/crascii
          asset_name: crascii-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS Binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./binaries/macos/crascii
          asset_name: crascii-macos
          asset_content_type: application/octet-stream 
